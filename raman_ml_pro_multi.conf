#!/bin/bash

### Configuration file for machine-learning-based analysis of Raman data

### General Settings for all Classifiers
FILE_PREFIX="pro"

# CV settings
N_TRIALS=20 # 20 
N_FOLDS=5 # 5
N_CORES=20 #-1
#MULTI_CLASS = TRUE

SCORING=("accuracy")

# See https://scikit-learn.org/stable/modules/model_evaluation.html for available metrics
# The first metric given is used for refitting

### Conda Configuration
CONDA_DIR="/apps/anaconda3"
ENV_NAME="raman"

### Dataset Creation
# Input directories (one for each class)
DIR1="/proj/raman/1_scientificomputing_graz_2023/data_theresestelzer/180411_out/bac/b_subtilis"
DIR2="/proj/raman/1_scientificomputing_graz_2023/data_theresestelzer/180411_out/ecoli/ecoli_c"
DIR3="/proj/raman/1_scientificomputing_graz_2023/data_theresestelzer/180411_out/pichia/pichia_pastoris"
DIR4="/proj/raman/1_scientificomputing_graz_2023/data_theresestelzer/180411_out/paenibac/paenibacillus"


# Labels for each class
LAB1="b_subtilis"
LAB2="ecoli_c"
LAB3="pichia_pastoris"
LAB4="paenibacillus"

### Quality Control
# Spectral Range
QC_LIM_LOW=550
QC_LIM_HIGH=1500

# Peak Detection
QC_WINDOW=35
QC_THRESHOLD=0.001
QC_MIN_HEIGHT=50

# Scoring
QC_SCORE=1
QC_PEAKS=1

# Number of spectra to keep
QC_NUM=45


### Preprocessing
# Spectral Range
PREP_LIM_LOW=$QC_LIM_LOW
PREP_LIM_HIGH=$QC_LIM_HIGH

# Smoothing
PREP_WINDOW=15


### Hyperparameter Settings
# Format: (min max+1 step) for integers or 
#         (min max number of steps) for floats


### LDA with dimensionality reduction
# PCA-LDA
# Number of Components
PCA_COMP=(1 41 1)

# NMF-LDA
# Number of Components
NMF_COMP=(5 41 5)

# Feature Agglomeration - LDA
# Number of Clusters
FA_CLUST=(5 41 5)

# Peak Picking - LDA
# Min. Distance between Peaks
PEAK_DIST=(10 151 5)


### Regularized linear models
# LogReg l1 
LR1_C=(-2 1 16) # log

# LogReg l2
LR2_C=(-4 1 13) # log

# Linear SVM l1
SVM1_C=(-2 1 16) # log

# Linear SVM l2
SVM2_C=(-4 -1 13) # log


### Tree-based models
# Decision Tree
DT_ALPHA=(-3 -1 9) # log

# Random Forest
RF_FEATURE_SAMPLE=(0.01 0.2 20)

# Gradient-boosted Decision Trees
GBDT_LEARNING_RATE=(0.01 0.2 20)


### More methods

# KNN